# The article model contains all data field that are found on a news article.
type Article @model(mutations: null, subscriptions: null)
    @key(fields: ["id", "uri"])
    @key(name: "byDate", fields: ["dataType", "displayDateTime"], queryField: "articlesByDate")
    @auth(rules: [{ allow: public, operations: [read], provider: iam }])
{
    authors: [String!]
    biasRating: String
    body: String!
    createdAt: AWSDateTime
    dataType: String!
    date: String
    datePublished: AWSDateTime!
    displayAuthors: [String!]
    displayDateTime: AWSDateTime!
    displayKeywords: [String!]
    displaySourceCountry: String!
    displaySourceTitle: String!
    displayTopics: [String!]
    eventUri: String
    id: ID!
    image: String
    keywords: [String!]
    language: String
    share: Int
    similarity: Float
    time: String
    sourceCountry: String!
    sourceRanking: Int
    sourceTitle: String!
    title: String!
    tone: Float!
    topics: [String!]
    timeToLive: Float
    updatedAt: AWSDateTime
    uri: String!
    url: String!
    wordCount: Int!
}

# Used to store most user information 
type User @model(subscriptions: null)
    @auth(rules:  [{ allow: owner, ownerField: "ownerId", operations: [ create, update, delete, read ] }])
    @key(name: "ByOwner" fields: ["ownerId"], queryField: "userByOwner")
{
    config: Config @connection(name: "UserConfig")
    createdAt: AWSDateTime
    email: String!
    id: ID!
    lastLogin: AWSDateTime
    ownerId: String
    feedbackDiscovery: String
    feedbackLeaveReason: String
    feedbackPromoterScore: Int
    updatedAt: AWSDateTime
}

# Used to store all filter options
type Config @model(subscriptions: null)
    @auth(rules:  [{ allow: owner, ownerField: "ownerId", operations: [ create, update, delete, read ] }])
    @key(name: "ByOwner" fields: ["ownerId"], queryField: "configByOwner")
{
    createdAt: AWSDateTime
    id: ID!
    keywordsToInclude: [String]!
    keywordsToExclude: [String]!
    ownerId: String
    toneUpperRange: Float!
    toneLowerRange: Float!
    topicsToInclude: AWSJSON!
    topicsToExclude: AWSJSON!
    savedArticleIds: [ID!]
    sourcesToInclude: [String]!
    sourcesToExclude: [String]!
    locationsToInclude: [String]!
    locationsToExclude: [String]!
    updatedAt: AWSDateTime
    user: User @connection(name: "UserConfig")
}